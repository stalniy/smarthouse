automation: !include ./automations.yml
script: !include ./scripts.yml

homeassistant:  
  customize:
    number.lux_ac_charge_mode:
      mapping: >-
        {
          "0": "Disable",
          "2": "Time",
          "4": "Battery Voltage",
          "6": "Battery SOC"
        }

input_datetime:
  ac_force_charge_finish_at:
    name: Time to finish force AC charge
    has_date: true
    has_time: true
  ac_charge_finished_at:
    name: Time when finished last AC charge
    has_date: true
    has_time: true

template:
  - select:
    - name: lux_ac_charge_type
      state: "{{ (state_attr('number.lux_ac_charge_mode', 'mapping') | from_json).get(int(states('number.lux_ac_charge_mode')) | string) }}"
      options: "{{ (state_attr('number.lux_ac_charge_mode', 'mapping') | from_json).values() | list }}"
      select_option:
      - service: number.set_value
        target:
          entity_id: number.lux_ac_charge_mode
        data:
          value: |
            {{ (state_attr('number.lux_ac_charge_mode', 'mapping') | from_json).items() 
                | selectattr('1', 'eq', option) 
                | first 
                | first 
            }}
  - sensor:
    - name: lux_duration_to_charge_battery
      state_class: measurement
      unit_of_measurement: h
      state: |
        {% set charge_power = float(states('number.lux_charge_current_limit'), 0) * 52 %}
        {% set full_capacity = 4800 %}
        {% set expected_capacity = full_capacity * float(states('sensor.lux_ac_charge_battery_level_to'), 0) / 100 %}
        {% set current_capacity = full_capacity * float(states('sensor.lux_battery'), 0) / 100 %}

        {{ 
          0 if current_capacity >= expected_capacity or charge_power == 0 else (expected_capacity - current_capacity) / charge_power 
        }}
    - name: lux_duration_to_discharge_battery
      state_class: measurement
      unit_of_measurement: h
      state: |
        {% set full_capacity = 4800 %}
        {% set current_battery_percentage = float(states('sensor.lux_battery'), 0) %}
        {% set current_power_consumption = float(states('sensor.lux_battery_discharge_live'), 0) %}  
        {% set min_battery_percentage = float(states('number.lux_off_grid_discharge_cut_off_soc'), 0) if is_state('binary_sensor.inverter_connected_to_grid', 'off') else float(states('number.lux_on_grid_discharge_cut_off_soc'), 0) %}
        
        {% if current_battery_percentage > min_battery_percentage and current_power_consumption > 0 %}
          {% set effective_remaining_capacity = full_capacity * (current_battery_percentage - min_battery_percentage) / 100 %}
          {{ effective_remaining_capacity / current_power_consumption }}
        {% else %}
          0
        {% endif %}

  - binary_sensor:
    - name: lux_requires_ac_charging
      state: |
        {% set battery_level = float(states('sensor.lux_battery'), 0) %}
        {% set ac_charge_to_level = float(states('sensor.lux_ac_charge_battery_level_to'), 0) %}
        {% set min_battery_level = float(states('number.lux_ac_charge_start_battery_soc'), 0) %}
        {{ 
          battery_level <= min_battery_level and min_battery_level < ac_charge_to_level or 
          battery_level < ac_charge_to_level
        }}
    - name: lux_may_ac_charge
      delay_on: "00:00:05"
      delay_off: "00:00:05"
      state: |
        {{ 
          is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and
          is_state('binary_sensor.lux_requires_ac_charging', 'on') or
          is_state('binary_sensor.lux_must_start_ac_charging', 'on')
        }}
    - name: lux_has_solar_output_live
      state: "{{ float(states('sensor.lux_solar_output_live'), 0) > 0 }}"
    - name: lux_ac_force_battery_charging
      state: >-
        {{ not is_state('time.lux_ac_charge_start3', '00:00:00') and 
          is_state('select.lux_ac_charge_type', 'Time') 
        }}
  - trigger:
    - platform: state
      entity_id: 
        - sensor.lux_duration_to_charge_battery
        - binary_sensor.is_cheap_grid_energy_period
    - platform: time_pattern
      minutes: /15
    binary_sensor:
      - name: lux_must_start_ac_charging
        state: |
          {% set hours_to_charge = float(states('sensor.lux_duration_to_charge_battery'), 0) %}
          {% if hours_to_charge == 0 %}
            off
          {% else %}
            {{
              is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and 
              (now() + timedelta(hours=hours_to_charge)) >= today_at('6:30')
            }}
          {% endif %}
  - sensor:
    - name: lux_ac_charge_battery_level_to
      unit_of_measurement: "%"
      state_class: measurement
      state: | 
        {% set power_forecast = float(states('sensor.solar_forecast'), 0) %}
        {% if power_forecast <= 5 %}
          100
        {% elif power_forecast <= 10 %}
          70
        {% elif power_forecast <= 15 %}
          40
        {% else %}
          0
        {% endif %}

  - trigger:
    - platform: time_pattern
      minutes: "/15"
    - platform: time_pattern
      hours: "*"
      minutes: 1
    - platform: numeric_state 
      entity_id: sensor.lux_battery
      below: 60
    - platform: numeric_state 
      entity_id: sensor.lux_battery
      below: 40
    - platform: numeric_state 
      entity_id: sensor.lux_battery
      below: 20
    binary_sensor:
      - name: lux_at_min_battery_level
        state: |
          {% set min_level = 10 %}
          {% if 4 <= now().month < 10 %}
            {% set min_level = 20 if 8 <= now().hour <= 14 else 40 %}
          {% else %}
            {% set min_level = 40 if 9 <= now().hour <= 12 else 60 %}
          {% endif %}
          
          {{ float(states('sensor.lux_battery'), 0) <= min_level }}
    
  - button:
    - unique_id: reconnect_to_luxpower
      name: Reconnect to Luxpower
      icon: mdi:connection
      press:
        service: luxpower.luxpower_reconnect
        data:
          dongle: "{{ state_attr('sensor.lux_data_received_time', 'dongle') }}"  
