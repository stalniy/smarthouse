- id: battery_charging_type_toggler
  mode: restart
  alias: Manage Lux battery cheap charging
  trigger:
    - platform: state
      entity_id: binary_sensor.lux_may_ac_charge
      to: 
        - "on"
        - "off"
  action:
    - delay: "00:00:15" # debounce to ensure that automation will be properly restarted
    - service: select.select_option
      data: 
        option: "{{ 'Time' if trigger.to_state.state == 'on' else 'Disable' }}"
      target:
        entity_id: select.lux_ac_charge_type
    - if:
      - condition: template
        value_template: "{{ trigger.to_state.state == 'off' and trigger.from_state.state == 'on' }}"
      then:
      - service: input_datetime.set_datetime
        data:
          datetime: "{{ now() }}"
        target:
          entity_id: input_datetime.ac_charge_finished_at

- id: force_ac_first_in_cheap_grid_period_after_battery_charged
  mode: restart
  alias: Switch to Grid during cheap period after battery charged to expected level
  trigger:
    platform: state
    entity_id: input_datetime.ac_charge_finished_at
  variables: 
    is_ac_first_enabled: |
      {{
        is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and 
        is_state('binary_sensor.lux_requires_ac_charging', 'off') and
        is_state('binary_sensor.lux_has_solar_output_live', 'off')
      }}
    start_time: "{{ now().strftime('%H:%M:%S') if is_ac_first_enabled else '00:00:00' }}"
    end_time: "{{ states('time.lux_ac_charge_end1') if is_ac_first_enabled else '00:00:00' }}"
  action: 
    - if: 
      - condition: template
        value_template: "{{ not is_state('time.lux_ac_first_start1', start_time) }}"
      then:
      - service: time.set_value
        target:
          entity_id: time.lux_ac_first_start1
        data: 
          time: "{{ start_time }}"
    - if: 
      - condition: template
        value_template: "{{ not is_state('time.lux_ac_first_end1', end_time) }}"
      then:
      - service: time.set_value
        target:
          entity_id: time.lux_ac_first_end1
        data: 
          time: "{{ end_time }}"

- id: disable_force_charging
  trigger:
    - platform: time
      at: input_datetime.ac_force_charge_finish_at
    - platform: homeassistant
      event: start
  condition: 
    - condition: template
      value_template: "{{ is_state('binary_sensor.lux_ac_force_battery_charging', 'on') }}"
  action:
    - service: script.lux_ac_force_charging
      data:
        state: false
    - service: input_datetime.set_datetime
      data:
        datetime: "{{ 0 | as_datetime }}"
      target:
        entity_id: input_datetime.ac_force_charge_finish_at

- id: reconnect_to_inverter
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: template
    value_template: "{{ now().timestamp() - state_attr('sensor.lux_data_received_time', 'timestamp') > 60 * 20 }}"
  action:
  - service: luxpower.luxpower_reconnect
    data:
      dongle: "{{ state_attr('sensor.lux_data_received_time', 'dongle') }}"