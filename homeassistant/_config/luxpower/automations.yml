- id: battery_charging_type_toggler
  mode: restart
  alias: Manage Lux battery cheap charging
  trigger:
    - platform: state
      entity_id: binary_sensor.is_cheap_grid_energy_period
      # entity_id: binary_sensor.lux_may_ac_charge
      to: ['on', 'off']
    - platform: state
      entity_id: binary_sensor.lux_battery_lower_needed_ac_charge_level
      to: ['on', 'off']
  variables:
    charge_type: |
      {{ 'Time' if is_state('binary_sensor.is_cheap_grid_energy_period', 'on') else 'Disable' }}
  condition:
    - condition: template
      value_template: |
        {{ 
          is_state('binary_sensor.is_cheap_grid_energy_period', 'off') or 
          is_state('binary_sensor.lux_battery_lower_needed_ac_charge_level', 'on')
        }}
  action:
    - if: 
      - condition: template
        value_template: "{{ charge_type != states('select.lux_ac_charge_type') }}"
      then:
      - delay: "00:00:05" # debounce to ensure that automation will be properly restarted
      - service: select.select_option
        data: 
          option: "{{ charge_type }}"
        target:
          entity_id: select.lux_ac_charge_type
      - wait_template: "{{ is_state('select.lux_ac_charge_type', charge_type) }}"
        timeout: 10
        continue_on_timeout: false
      - service_template: "switch.turn_{{ 'on' if charge_type == 'Time' else 'off' }}"
        target:
          entity_id: switch.lux_ac_charge_enable

    # - if:
    #   - condition: template
    #     value_template: "{{ trigger.to_state.state == 'off' and trigger.from_state.state == 'on' }}"
    #   then:
    #   - service: input_datetime.set_datetime
    #     data:
    #       datetime: "{{ now() }}"
    #     target:
    #       entity_id: input_datetime.ac_charge_finished_at

- id: lux_set_ac_battery_level
  alias: Set lux AC charge battery level
  trigger:
    - platform: state
      entity_id: binary_sensor.is_cheap_grid_energy_period
      to: 'on'
    # - platform: homeassistant
    #   event: start
  action: 
    - service: number.set_value
      target:
        entity_id: number.lux_ac_battery_charge_level
      data:
        value: |
          {% set power_forecast = float(states('sensor.solcast_pv_forecast_forecast_tomorrow'), 12) %}
          {% set battery_level = float(states('sensor.lux_battery'), 0) %}
          
          {% if power_forecast <= 10 %}
            100
          {% elif power_forecast <= 15 %}
            70
          {% elif power_forecast <= 20 or battery_level < 40 %}
            40
          {% else %}
            0
          {% endif %}


# - id: force_ac_first_in_cheap_grid_period_after_battery_charged
#   mode: restart
#   alias: Switch to Grid during cheap period after battery charged to expected level
#   trigger:
#     platform: state
#     entity_id: input_datetime.ac_charge_finished_at
#   variables: 
#     is_ac_first_enabled: |
#       {{
#         is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and 
#         is_state('binary_sensor.lux_requires_ac_charging', 'off') and
#         is_state('binary_sensor.lux_has_solar_output_live', 'off')
#       }}
#     start_time: "{{ now().strftime('%H:%M:%S') if is_ac_first_enabled else '00:00:00' }}"
#     end_time: "{{ states('time.lux_ac_charge_end1') if is_ac_first_enabled else '00:00:00' }}"
#   action: 
#     - if: 
#       - condition: template
#         value_template: "{{ not is_state('time.lux_ac_first_start1', start_time) }}"
#       then:
#       - service: time.set_value
#         target:
#           entity_id: time.lux_ac_first_start1
#         data: 
#           time: "{{ start_time }}"
#     - if: 
#       - condition: template
#         value_template: "{{ not is_state('time.lux_ac_first_end1', end_time) }}"
#       then:
#       - service: time.set_value
#         target:
#           entity_id: time.lux_ac_first_end1
#         data: 
#           time: "{{ end_time }}"

- id: disable_force_charging
  trigger:
    - platform: time
      at: input_datetime.ac_force_charge_finish_at
    - platform: homeassistant
      event: start
  condition: 
    - condition: template
      value_template: "{{ is_state('binary_sensor.lux_ac_force_battery_charging', 'on') }}"
  action:
    - service: script.lux_ac_force_charging
      data:
        state: false
    - service: input_datetime.set_datetime
      data:
        datetime: "{{ 0 | as_datetime }}"
      target:
        entity_id: input_datetime.ac_force_charge_finish_at

- id: reconnect_to_inverter
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: template
    value_template: "{{ now().timestamp() - state_attr('sensor.lux_data_received_time', 'timestamp') > 60 * 7 }}"
  action:
  - service: persistent_notification.create
    data:
      title: "âš  - Warning!"
      message: |
        Lux power reconnect initiated
  - service: luxpower.luxpower_reconnect
    data:
      dongle: !secret lux_dongle_serial

- id: refresh_lux_values
  mode: restart
  alias: Refresh LUX values 
  trigger:
    - platform: state
      entity_id: 
        - switch.hwc_heating
      to: "on"
    - platform: time_pattern
      seconds: "/5"
  condition:
    - condition: template
      value_template: |
        {{ 
          has_value('number.lux_generator_charge_battery_current') and
          has_value('sensor.lux_battery') and
          has_value('sensor.lux_data_received_time')
        }}
  action:
    - service: luxpower.luxpower_refresh_registers
      data:
        dongle: !secret lux_dongle_serial
      
- id: sync_lux_time
  mode: single
  alias: Sync lux time to local time
  trigger:
    platform: time
    at: '23:00:00'
  action:
    - service: luxpower.luxpower_synctime
      data:
        dongle: !secret lux_dongle_serial
        do_set_time: true