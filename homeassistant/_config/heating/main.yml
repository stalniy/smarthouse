automation: !include ./automations.yml
script: !include ./scripts.yml

homeassistant:
  customize:
    number.ebusd_bai_partloadhckw_power:
      max: 14
      min: 2
    number.ebusd_bai_partloadhwckw_power:
      max: 14
      min: 2
    number.ebusd_bai_hwctempmax_temp:
      min: 35
      max: 75
      step: 1
      mode: slider
    climate.master_bedroom:
      location: house
      heater_type: radiator 
    climate.master_bathroom_hotfloor:
      heater_type: hotfloor
      location: house
    climate.cabinet:
      heater_type: radiator
      location: house
    climate.kid_small_bedroom:
      heater_type: radiator
      location: house
    climate.kid_big_bedroom:
      heater_type: radiator
      location: house
    climate.kid_bathroom_hotfloor:
      heater_type: hotfloor
      location: house
    climate.livingroom:
      heater_type: radiator
      location: house
    climate.livingroom_hotfloor_table:
      heater_type: hotfloor
      heater_importance: high
      location: house
    climate.livingroom_hotfloor_fireplace:
      heater_type: hotfloor
      heater_importance: high
      location: house
    climate.livingroom_hotfloor_exit:
      heater_type: hotfloor
      heater_importance: high
      location: house
    climate.kitchen_hotfloor:
      heater_type: hotfloor
      heater_importance: high
      location: house
    climate.entrance_room_hotfloor:
      heater_type: hotfloor
      location: house
input_number: 
  main_heater_storage_temp_desired:
    name: Бажана темп. ГВС
    min: 35
    max: 70
    step: 1
    icon: mdi:thermometer-water
    unit_of_measurement: °C
  min_heating_temp_diff:
    name: Мін. різниця температур повітря в кімнатах 
    unit_of_measurement: °C
    icon: mdi:thermometer
    min: -30
    max: 30

input_datetime: 
  disable_hot_floor_pump_at:
    name: Час вимкнення насос гарячої підлоги
    icon: mdi:clock
    has_date: true
    has_time: true

input_select:
  heating_mode:
    name: Heating mode
    options:
      - minimum # 35 C
      - normal  # 40 C
      - fast    # 50 C
      - swift # 60 C
      - auto
    icon: mdi:heat-wave
  heating_preset:
    name: Heating preset
    options:
      - only_hot_floor
      - only_hot_floor_eco
      - only_radiators
      - both
      - 'off' # disable automatic heating
input_boolean:
  heating_enabled:
    name: Включити опалення
  hwc_enabled: 
    name: Включити ГВС

  # because I have NO heating valves, I need thermostat to somewhere store its desired state
  # so then I can understand whether heating is required or not based on `hvac_action` attribute
  # and be able to optimize electisity usage by opening valves when heater doesn't heat
  thermostat_driven_heater_valve_master_bedroom:
  thermostat_driven_heater_valve_master_bathroom_hot_floor:
  thermostat_driven_heater_valve_cabinet:
  thermostat_driven_heater_valve_kid_small_bedroom:
  thermostat_driven_heater_valve_kid_big_bedroom:
  thermostat_driven_heater_valve_hall_and_small_bathroom:
  thermostat_driven_heater_valve_livingroom:
  thermostat_driven_heater_valve_hot_floor_livingroom1:
  thermostat_driven_heater_valve_hot_floor_livingroom2:
  thermostat_driven_heater_valve_hot_floor_livingroom3:
  thermostat_driven_heater_valve_kitchen_hot_floor:
  thermostat_driven_heater_valve_hot_floor_entrance_tech_room:

template:
  - sensor:
    - name: main_heater_current_power
      icon: mdi:flash
      device_class: power
      state_class: measurement
      state: |
        {% set max_power = 14 %}
        {% if states("binary_sensor.ebusd_bai_flame") == 'on' %}
          {{ states('sensor.ebusd_bai_modulationtempdesired') | float(0) * max_power / 100 | round(2) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: kW

    - name: main_heater_errors
      icon: mdi:alert-octagram
      state: |
        {% set sensors = [
          states('sensor.ebusd_bai_currenterror_error'), 
          states('sensor.ebusd_bai_currenterror_error_2'), 
          states('sensor.ebusd_bai_currenterror_error_3'), 
          states('sensor.ebusd_bai_currenterror_error_4'), 
          states('sensor.ebusd_bai_currenterror_error_5') 
        ] %}
        {% set result = sensors
          | reject('eq', 'None')
          | list
          | join(',\n')
        %}
        {{ 'none' if result == '' else result }}
        
  - binary_sensor: 
    - name: is_day_cheap_heating_period
      state: "{{ is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and is_state('binary_sensor.is_day_heating_time', 'on') }}"
    - name: is_hot_floor_valves_open
      delay_on: 00:03:00 # time to open heater valve
      state: |
        {{ ([
          states('switch.heater_valve_master_bathroom_hot_floor'),
          states('switch.heater_valve_hall_and_small_bathroom'),
          states('switch.heater_valve_hot_floor_livingroom3'),
          states('switch.heater_valve_hot_floor_livingroom2'),
          states('switch.heater_valve_hot_floor_livingroom1'),
          states('switch.heater_valve_kitchen_hot_floor'),
          states('switch.heater_valve_hot_floor_entrance_tech_room')
        ] | select('eq', 'off') | first) == 'off' }}
    - name: is_radiator_valves_open
      delay_on: 00:03:00 # time to open heater valve
      state: |
        {{ ([
          states('switch.heater_valve_master_bedroom'),
          states('switch.heater_valve_cabinet'),
          states('switch.heater_valve_kid_small_bedroom'),
          states('switch.heater_valve_kid_big_bedroom'),
          states('switch.heater_valve_livingroom'),
        ] | select('eq', 'off') | first) == 'off' }}
    - name: hot_floor_pump_required
      state: |
        {{
          is_state('binary_sensor.is_hot_floor_valves_open', 'on') and (
            float(states('sensor.fireplace_fan_power'), 0) > 0 or
            is_state('input_boolean.heating_enabled', 'on') or
            float(states('sensor.solcast_pv_forecast_forecast_this_hour'), 0) > 1000 and
            as_datetime(states('sensor.solcast_pv_forecast_api_last_polled')).hour == now().hour
          )
        }}
    - name: requires_heating_in_house
      state: |
        {{
          (states.climate 
            | selectattr('attributes.location', 'eq', 'house')
            | map(attribute='attributes.hvac_action')
            | select('eq', 'heating')
            | first) == 'heating'
        }}
    - name: heating_only_hotfloor_in_house
      state: |
        {% set thermostats_heating = states.climate 
          | selectattr('attributes.location', 'eq', 'house')
          | selectattr('attributes.hvac_action', 'eq', 'heating')
          | list
        %}
        {{
          (thermostats_heating 
            | selectattr('attributes.heater_type', 'eq', 'hotfloor') 
            | list 
            | count) == (thermostats_heating | count)
        }}
    
  - trigger:
    - platform: time_pattern
      minutes: "/1"
    - platform: event
      event_type: event_template_reloaded
    sensor:
    - name: main_heater_current_power_live
      icon: mdi:flash
      unit_of_measurement: "kW"
      device_class: power
      state_class: measurement
      state: >-
        {{ float(states('sensor.main_heater_current_power'), 0) }}
      attributes: 
        triggered_at: "{{ now() }}"
  - trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
    - platform: event
      event_type: my_event_template_reloaded
    - platform: homeassistant
      event: start
    binary_sensor:
    - name: is_day_heating_time
      state: "{{ 5 <= now().hour < 21 }}"
  - trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
    binary_sensor:
    - name: boiler_requires_reheating
      state: "{{ now().strftime('%a') == 'Sat' }}"
  - trigger:
    - platform: event
      event_type: my_event_template_reloaded
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: 
        - binary_sensor.is_cheap_grid_energy_period
        - binary_sensor.inverter_connected_to_grid
        - sensor.lux_battery
        - sensor.lux_battery_discharge_live
        - binary_sensor.boiler_requires_reheating
        - sensor.solcast_pv_forecast_forecast_remaining_today
        - binary_sensor.lux_has_solar_output_live
    - platform: time_pattern
      hours: "*"
      minutes: 0
    binary_sensor:
    - name: boiler_heating_required
      state: >-
        {% set used_battery_capacity = 4.8 * (100 - float(states('sensor.lux_battery'), 0)) /100 %}
        {% set can_heat_during_day = is_state('binary_sensor.lux_has_solar_output_live', 'on') and (
            0.8 * float(states('sensor.solcast_pv_forecast_forecast_remaining_today'), 0) > used_battery_capacity and
            as_datetime(states('sensor.solcast_pv_forecast_api_last_polled')).timestamp() > int(state_attr('input_datetime.last_water_heater_2k_state_changed', 'timestamp')) and
            float(states('sensor.lux_battery'), 0) > 40
          )
        %}
        {% set can_heat_during_night = 4 <= now().hour < 7 and 
            is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and
            is_state('binary_sensor.inverter_connected_to_grid', 'on') and
            not is_state('sensor.lux_ac_charge_battery_level_to', '0')
        %}
        {% set can_reheat = is_state('binary_sensor.is_cheap_grid_energy_period', 'on') and 
            is_state('binary_sensor.boiler_requires_reheating', 'on') and
            is_state('binary_sensor.ebusd_signal', 'on')
        %}

        {{ can_reheat or can_heat_during_day or can_heat_during_night }}
  - trigger:
    - platform: event
      event_type: my_event_template_reloaded
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: 
        - light.kid_bathroom
        - light.master_bathroom
        - binary_sensor.kitchen_table_presence
      to:
        - 'on'
        - 'off'
    - platform: time
      at: 
        - "06:00:00"
        - "07:00:00"
        - input_datetime.back_home_at
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.hot_water_turn_off_after_time_based_on
    action:
      - if: 
        - condition: template
          value_template: "{{ trigger.platform == 'time' }}"
        then:
          - service: timer.start
            target:
              entity_id: timer.hot_water_turn_off_after_time_based_on
    binary_sensor:
    - name: hot_water_pump_required
      state: |
        {{
          states.light.kid_bathroom.state == 'on' or
          states.light.master_bathroom.state == 'on' or
          states.binary_sensor.kitchen_table_presence.state == 'on' or
          trigger.platform == 'time'
        }}
  - trigger:
      - platform: state
        entity_id: 
          - binary_sensor.is_day_cheap_heating_period
          - binary_sensor.is_day_heating_time
      - platform: state
        entity_id: group.residents
        for: "00:05:00"
      - platform: event
        event_type: sleeping_time_start
      - platform: event
        event_type: sleeping_time_end
    sensor:
    - name: heating_preset_mode
      state: |
        {% if 
          is_state('binary_sensor.is_day_heating_time', 'off') or 
          is_state('group.residents', 'not_home') or 
          trigger.platform == 'event' and trigger.event.event_type == 'sleeping_time_start'
        %}
          sleep        
        {% elif is_state('binary_sensor.is_day_cheap_heating_period', 'on') %}
          comfort
        {% else %}
          home
        {% endif %}
sensor:
  - platform: integration
    source: sensor.main_heater_current_power_live
    name: main_heater_energy
    round: 1
  - platform: min_max
    name: house_min_temp
    type: min
    round_digits: 1
    entity_ids:
      - sensor.cabinet_climate_temperature
      - sensor.kid_bathroom_climate_temperature
      - sensor.master_bathroom_climate_temperature
      - sensor.master_bedroom_climate_temperature
      - sensor.master_wardrobe_climate_temperature
      - sensor.living_room_climate_temperature
      - sensor.entrance_room_climate_temperature

climate:
  - platform: generic_thermostat
    name: master_bedroom
    heater: input_boolean.thermostat_driven_heater_valve_master_bedroom
    target_sensor: sensor.master_bedroom_climate_temperature
    away_temp: 15
    comfort_temp: 19
    home_temp: 18
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: master_bathroom_hotfloor
    heater: input_boolean.thermostat_driven_heater_valve_master_bathroom_hot_floor
    target_sensor: sensor.master_bathroom_climate_temperature
    away_temp: 15
    comfort_temp: 20
    home_temp: 19
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: cabinet
    heater: input_boolean.thermostat_driven_heater_valve_cabinet
    target_sensor: sensor.cabinet_climate_temperature
    away_temp: 15
    comfort_temp: 20
    home_temp: 19
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: kid_small_bedroom
    heater: input_boolean.thermostat_driven_heater_valve_kid_small_bedroom
    target_sensor: sensor.kid_small_bedroom_climate_temperature
    away_temp: 15
    comfort_temp: 20
    home_temp: 18
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: kid_big_bedroom
    heater: input_boolean.thermostat_driven_heater_valve_kid_big_bedroom
    target_sensor: sensor.kid_big_bedroom_climate_temperature
    away_temp: 15
    comfort_temp: 20
    home_temp: 18
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: kid_bathroom_hotfloor
    heater: input_boolean.thermostat_driven_heater_valve_hall_and_small_bathroom
    target_sensor: sensor.kid_bathroom_climate_temperature
    away_temp: 15
    comfort_temp: 20
    home_temp: 20
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: livingroom
    heater: input_boolean.thermostat_driven_heater_valve_livingroom
    target_sensor: sensor.living_room_climate_temperature
    away_temp: 15
    comfort_temp: 21
    home_temp: 19
    sleep_temp: 17
    precision: 0.1
  - platform: generic_thermostat
    name: livingroom_hotfloor_table
    heater: input_boolean.thermostat_driven_heater_valve_hot_floor_livingroom1
    target_sensor: sensor.living_room_climate_temperature
    away_temp: 7
    comfort_temp: 21
    home_temp: 20
    sleep_temp: 18
    precision: 0.1
  - platform: generic_thermostat
    name: livingroom_hotfloor_fireplace
    heater: input_boolean.thermostat_driven_heater_valve_hot_floor_livingroom2
    target_sensor: sensor.living_room_climate_temperature
    away_temp: 7
    comfort_temp: 21
    home_temp: 20
    sleep_temp: 18
    precision: 0.1
  - platform: generic_thermostat
    name: livingroom_hotfloor_exit
    heater: input_boolean.thermostat_driven_heater_valve_hot_floor_livingroom3
    target_sensor: sensor.living_room_climate_temperature
    away_temp: 10
    comfort_temp: 21
    home_temp: 19
    sleep_temp: 18
    precision: 0.1
  - platform: generic_thermostat
    name: kitchen_hotfloor
    heater: input_boolean.thermostat_driven_heater_valve_kitchen_hot_floor
    target_sensor: sensor.kitchen_climate_temperature
    away_temp: 10
    comfort_temp: 21
    home_temp: 20
    sleep_temp: 18
    precision: 0.1
  - platform: generic_thermostat
    name: entrance_room_hotfloor
    heater: input_boolean.thermostat_driven_heater_valve_hot_floor_entrance_tech_room
    target_sensor: sensor.entrance_room_motion_temperature
    away_temp: 10
    comfort_temp: 20
    home_temp: 19
    sleep_temp: 17
    precision: 0.1

timer:
  hot_water_turn_off_after_time_based_on:
    duration: "00:05:00"