automation: !include ./automations.yml

homeassistant:
  customize:
    number.ebusd_bai_partloadhckw_power:
      max: 14
      min: 2
    number.ebusd_bai_partloadhwckw_power:
      max: 14
      min: 2
    number.ebusd_bai_hwctempmax_temp:
      min: 35
      max: 75
      step: 1
      mode: slider

input_number: 
  master_bedroom_temp_desired:
    name: Доросла спальня 
    initial: 19
    min: 5
    max: 25
    step: 1 
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  master_bathroom_temp_desired:
    name: Доросла ванна 
    initial: 19
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  cabinet_temp_desired:
    name: Кабінет 
    initial: 19
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  kid_small_bedroom_temp_desired:
    name: Дитяча мала спальня 
    initial: 19
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  kid_big_bedroom_temp_desired:
    name: Дитяча велика спальня 
    initial: 19
    min: 5
    max: 25
    step: 1 
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  kid_bathroom_temp_desired:
    name: Дитяча ванна 
    initial: 19
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  kitchen_temp_desired:
    name: Кухня
    initial: 19
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  living_room_temp_desired:
    name: Вітальня
    initial: 19
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C
  entrance_room_temp_desired:
    name: Вхідна кімната
    initial: 18
    min: 5
    max: 25
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C

  night_shift_temp_desired:
    name: Нічне пониження темп.
    min: 0
    max: 10
    step: 1
    icon: mdi:home-thermometer
    unit_of_measurement: °C

  main_heater_storage_temp_desired:
    name: Бажана темп. ГВС
    min: 35
    max: 70
    step: 1
    icon: mdi:thermometer-water
    unit_of_measurement: °C

  heating_last_flowtemp: 
    name: Останнє значення температури носія 
    min: 0
    max: 100
    step: 1
    icon: mdi:thermometer
    unit_of_measurement: °C

input_datetime: 
  disable_hot_floor_pump_at:
    name: Час вимкнення насос гарячої підлоги
    icon: mdi:clock
    has_date: true
    has_time: true

input_select:
  heating_mode:
    name: Heating mode
    options:
      - minimum # 35 C
      - normal  # 40 C
      - fast    # 50 C
      - swift # 60 C
      - auto
    icon: mdi:heat-wave
  heating_preset:
    name: Heating preset
    options:
      - only_hot_floor
      - only_hot_floor_eco
      - only_radiators
      - both

input_boolean:
  heating_enabled:
    name: Включити опалення
  hwc_enabled: 
    name: Включити ГВС

template:
  - sensor:
    - name: main_heater_current_power
      icon: mdi:flash
      device_class: power
      state_class: measurement
      state: |
        {% set max_power = 14 %}
        {% if states("binary_sensor.ebusd_bai_flame") == 'on' %}
          {{ states('sensor.ebusd_bai_modulationtempdesired') | float(0) * max_power / 100 | round(2) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: kW

    - name: main_heater_errors
      icon: mdi:alert-octagram
      state: |
        {% set sensors = [
          states('sensor.ebusd_bai_currenterror_error'), 
          states('sensor.ebusd_bai_currenterror_error_2'), 
          states('sensor.ebusd_bai_currenterror_error_3'), 
          states('sensor.ebusd_bai_currenterror_error_4'), 
          states('sensor.ebusd_bai_currenterror_error_5') 
        ] %}
        {% set result = sensors
          | reject('eq', 'None')
          | list
          | join(',\n')
        %}
        {{ 'none' if result == '' else result }}
    - name: current_temp_shift_desired
      state_class: measurement
      state: |
        {% if is_state('binary_sensor.is_day_heating_time', 'on') %}
          0
        {% else %}
          {{ states('input_number.night_shift_temp_desired') | float(0) }}
        {% endif %}
      unit_of_measurement: °C
    - name: house_min_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'state_of_entity.jinja' import state_of_entities %}
        {{ [
            {
              'value': states('sensor.master_bedroom_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.master_bedroom_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.master_bathroom_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.master_bathroom_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.cabinet_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.cabinet_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.kid_small_bedroom_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.kid_small_bedroom_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.kid_big_bedroom_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.kid_big_bedroom_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.kid_bathroom_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.kid_bathroom_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.living_room_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.living_room_heating_temp_diff', 'heater_valve')) | from_json | select('eq', 'on') | first | default('off') if state_attr('sensor.living_room_heating_temp_diff', 'heater_valve') is iterable else 'unknown'
            },
            {
              'value': states('sensor.kitchen_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.kitchen_heating_temp_diff', 'heater_valve'))
            },
            {
              'value': states('sensor.entrance_room_heating_temp_diff'),
              'open': state_of_entities(state_attr('sensor.entrance_room_heating_temp_diff', 'heater_valve'))
            } 
          ] | selectattr('open', 'eq', 'off') | map(attribute='value') | map('float', 0) | min | default(0) 
        }}
    - name: heating_flow_temperature
      state_class: measurement
      state: |
        {% if states('sensor.ebusd_bai_positionvalveset') == 'Heating' %}
          {{ states('sensor.ebusd_bai_flowtemp_temp') }}
        {% else %}
          {{ states('input_number.heating_last_flowtemp') }}
        {% endif %}
      unit_of_measurement: °C

  - binary_sensor: 
    - name: is_day_heating_time
      state: "{{ 5 <= now().hour <= 21 }}"
    - name: is_cheap_heating_period
      state: "{{ 23 <= now().hour or now().hour < 7 }}"
    - name: is_hot_floor_valves_open
      state: |
        {{ ([
          states('switch.heater_valve_master_bathroom_hot_floor'),
          states('switch.heater_valve_hall_and_small_bathroom'),
          states('switch.heater_valve_hot_floor_livingroom3'),
          states('switch.heater_valve_hot_floor_livingroom2'),
          states('switch.heater_valve_hot_floor_livingroom1'),
          states('switch.heater_valve_kitchen_hot_floor'),
          states('switch.heater_valve_hot_floor_entrance_tech_room')
        ] | select('eq', 'off') | first) == 'off' }}
    - name: hot_floor_pump_required
      state: |
        {% if is_state('binary_sensor.is_hot_floor_valves_open', 'on') %}
          {{
            float(states('sensor.fireplace_fan_power'), 0) > 0 or
            is_state('input_boolean.heating_enabled', 'on') or
            float(states('sensor.solcast_pv_forecast_forecast_this_hour'), 0) > 1000
          }}
        {% else %}
          off
        {% endif %}

  - sensor:
    - name: master_bedroom_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('master_bedroom') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_master_bedroom 
    - name: master_bathroom_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('master_bathroom') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_master_bathroom_hot_floor 
    - name: cabinet_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('cabinet') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_cabinet 
    - name: kid_small_bedroom_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('kid_small_bedroom') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_kid_small_bedroom 
    - name: kid_big_bedroom_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('kid_big_bedroom') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_kid_big_bedroom 
    - name: kid_bathroom_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('kid_bathroom') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_hall_and_small_bathroom 
    - name: living_room_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('living_room') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: |
          {{[
            'switch.heater_valve_livingroom',
            'switch.heater_valve_hot_floor_livingroom3',
            'switch.heater_valve_hot_floor_livingroom2',
            'switch.heater_valve_hot_floor_livingroom1',
          ]}}
    - name: kitchen_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('kitchen') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_kitchen_hot_floor 
    - name: entrance_room_heating_temp_diff
      state_class: measurement
      state: |
        {% from 'heating_temp_diff.jinja' import heating_temp_diff %}
        {{ heating_temp_diff('entrance_room') }}
      attributes:
        requires_heating: "{{ 'on' if float(this.state, 0) < 0 else 'off' }}"
        heater_valve: switch.heater_valve_hot_floor_entrance_tech_room
    - name: requires_heating
      state: |
        {{
          is_state_attr('sensor.master_bedroom_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.master_bathroom_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.cabinet_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.kid_small_bedroom_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.kid_big_bedroom_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.kid_bathroom_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.living_room_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.kitchen_heating_temp_diff', 'requires_heating', 'on') or 
          is_state_attr('sensor.entrance_room_heating_temp_diff', 'requires_heating', 'on') 
        }}
  
  - binary_sensor:
    - name: heating_valve_open_master_bedroom
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open %}
        {{ heating_valve_open('master_bedroom', ['only_radiators']) }}
    - name: heating_valve_open_master_bathroom
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open_hot_floor %}
        {{ heating_valve_open_hot_floor('master_bathroom', ['only_hot_floor']) }}
    - name: heating_valve_open_cabinet
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open %}
        {{ heating_valve_open('cabinet', ['only_radiators']) }}
    - name: heating_valve_open_kid_small_bedroom
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open %}
        {{ heating_valve_open('kid_small_bedroom', ['only_radiators']) }}
    - name: heating_valve_open_kid_big_bedroom
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open %}
        {{ heating_valve_open('kid_big_bedroom', ['only_radiators']) }}
    - name: heating_valve_open_kid_bathroom
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open_hot_floor %}
        {{ heating_valve_open_hot_floor('kid_bathroom', ['only_hot_floor', 'only_hot_floor_eco']) }}
    - name: heating_valve_open_living_room
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open %}
        {{ heating_valve_open('living_room', ['only_radiators']) }}
    - name: heating_valve_open_living_room_hot_floor
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open_hot_floor %}
        {{ heating_valve_open_hot_floor('living_room', ['only_hot_floor', 'only_hot_floor_eco']) }}
    - name: heating_valve_open_kitchen
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open_hot_floor %}
        {{ heating_valve_open_hot_floor('kitchen', ['only_hot_floor', 'only_hot_floor_eco']) }}
    - name: heating_valve_open_entrance_room
      state: |
        {% from 'heating_valve_open.jinja' import heating_valve_open_hot_floor %}
        {{ heating_valve_open_hot_floor('entrance_room', ['only_hot_floor']) }}

  - trigger:
    - platform: time_pattern
      minutes: "/1"
    sensor:
    - name: main_heater_current_power_live
      icon: mdi:flash
      unit_of_measurement: "kW"
      device_class: power
      state_class: measurement
      state: >-
        {{ float(states('sensor.main_heater_current_power'), 0) }}
      attributes: 
        triggered_at: "{{ now() }}"
sensor:
  - platform: integration
    source: sensor.main_heater_current_power_live
    name: main_heater_energy
    round: 1
  - platform: min_max
    name: house_min_temp
    type: min
    round_digits: 1
    entity_ids:
      - sensor.cabinet_climate_temperature
      - sensor.kid_bathroom_climate_temperature
      - sensor.master_bathroom_climate_temperature
      - sensor.master_bedroom_climate_temperature
      - sensor.master_wardrobe_climate_temperature
      - sensor.living_room_climate_temperature
      - sensor.entrance_room_climate_temperature