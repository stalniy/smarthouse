input_boolean:
  skip_child_zone: 
    name: Не прибирати дитячу зону у вітальні

input_datetime:
  last_cleaned_at:
    name: Дата останнього прибрання
    has_date: true
    has_time: false

template: 
  - sensor:
    - name: rooms_to_clean_today
      state: >-
        {% set rooms_to_clean = [
          "hall",
          "living_room_table",
          "kitchen"
        ] %} 
        {% set week_day = now().isoweekday() %}
        
        {% if week_day % 2 == 0 or week_day in [6, 7] %} 
          {% set rooms_to_clean = rooms_to_clean + [
            "bedroom_kid_small",
            "bedroom_kid_big"
          ]%}

          {% if states('input_boolean.skip_child_zone') == 'off' %}
            {% set rooms_to_clean = rooms_to_clean + ["living_room_entertainment"] %}
          {% endif %}
        {% endif %}

        {% if week_day % 2 != 0 or week_day in [6, 7] %}
          {% set rooms_to_clean = rooms_to_clean + [
            "master_bedroom",
            "wardrobe",
            "cabinet"
          ]%}
        {% endif %}

        {{ rooms_to_clean | to_json }}

script:
  vacuum_clean:
    alias: Vacuum clean rooms
    mode: queued
    icon: mdi:robot-vacuum
    description: |
      Cleans specified rooms by their names
    fields:
      rooms:
        name: Rooms to clean
        required: true
        selector:
          select:
            multiple: true
            options:
            - ALL
            - bedroom_kid_small
            - bedroom_kid_big
            - cabinet
            - kitchen
            - main_entrance_room
            - living_room_table
            - child_bathroom
            - master_bedroom
            - wardrobe
            - living_room_entertainment
            - master_bathroom
            - hall
      repeats:
        name: Repeat cleaning
        default: 1
        selector:
          number:
            min: 1
            max: 10
    variables:
      roomsIds: |
        {% 
          set all_rooms = [
            { "label": "bedroom_kid_small", "id": 16 },
            { "label": "bedroom_kid_big", "id": 17 },
            { "label": "cabinet", "id": 18 },
            { "label": "kitchen", "id": 19 },
            { "label": "main_entrance_room", "id": 20 },
            { "label": "living_room_table", "id": 21 },
            { "label": "child_bathroom", "id": 27 },
            { "label": "master_bedroom", "id": 23 },
            { "label": "wardrobe", "id": 24 },
            { "label": "living_room_entertainment", "id": 25 },
            { "label": "master_bathroom", "id": 26 },
            { "label": "hall", "id": 22 }
          ]
        %} 
        {% if 'ALL' in rooms %}
          {{ all_rooms | map(attribute="id") | list }}
        {% else %}
          {{ all_rooms 
            | selectattr('label', 'in', rooms)
            | map(attribute="id")
            | list 
          }}
        {% endif %}
      start_on_vacuum_state:
        - 'docked'
        - 'idle'
        - 'returning'
    sequence:
      - alias: Очікуємо поки робот завершить прибирання
        wait_template: |
          {{ states('vacuum.bruce') in start_on_vacuum_state }}
        timeout: "01:30:00"
      - if: 
          - condition: template
            value_template: "{{ wait.completed }}"
        then:
          - service: notify.telegram_serhii
            data:
              message: |
                Брюс запланував прибирання:
                {{ rooms | join("\n") | replace('_', '\_') }}
          - service: vacuum.send_command
            data:
              command: app_segment_clean
              params: 
                - segments: "{{ roomsIds }}"
                  repeat: "{{ repeats | int }}"
            target:
              entity_id: vacuum.bruce
          - if: 
              - condition: template
                value_template: |
                  {{ 
                    is_state('input_boolean.skip_child_zone', 'on') and 
                    'living_room_entertainment' in rooms 
                  }}
            then:
              - service: script.vacuum_clean_zone
                data:
                  zones:
                    - livingroom_entertainment
        else:
          - service: notify.telegram_serhii
            data:
              message: |
                Заплановане прибирання проігнороване, бо стан Брюса не змінився на {{ start_on_vacuum_state }}:
                {{ rooms | join("\n") | replace('_', '\_') }}
                
                Почати прибирання: /clean\_house


  vacuum_clean_zone:
    alias: Vacuum clean zones
    icon: mdi:robot-vacuum
    mode: single
    fields:
      zones:
        name: Zone names to clean
        required: true
        selector:
          select:
            multiple: true
            options:
              - terrace_exit
              - fireplace
              - livingroom_entertainment
    variables:  
      zones_coords: |
        {% 
          set coords = [
            { "label": "livingroom_entertainment", "value": [24100,25160,27340,28220] },
            { "label": "terrace_exit", "value": [26033,25167,27317,27283] },
            { "label": "fireplace", "value": [21825,25800,24350,27350] }
          ]
        %}
        {{ coords 
          | selectattr('label', 'in', zones)
          | map(attribute="value")
          | list  
        }}
      start_on_vacuum_state:
        - 'docked'
        - 'idle'
        - 'returning'
    sequence: 
      - alias: Очікуємо поки робот завершить прибирання
        wait_template: |
          {{ states('vacuum.bruce') in start_on_vacuum_state }}
        timeout: "00:15:00"
      - service: xiaomi_miio.vacuum_clean_zone
        data:
          repeats: 2
          zone: "{{ zones_coords }}"
        target:
          entity_id: vacuum.bruce
      
automation: !include ./automations.yml