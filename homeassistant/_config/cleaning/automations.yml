- id: clean_bathroom
  alias: "Прибрати ванну"
  mode: queued
  trigger:
    - platform: template
      value_template: "{{ is_state('counter.kid_bathroom_switch', '3') }}"
      variables:
        bathroom_id: child_bathroom
        feedback_entity_id: light.kid_bathroom
    - platform: template
      value_template: "{{ is_state('counter.master_bathroom_switch', '3') }}"
      variables:
        bathroom_id: master_bathroom
        feedback_entity_id: light.master_bathroom
  action:
    - service: script.light_feedback
      data:
        entity_id: "{{ feedback_entity_id }}"
    - service: script.vacuum_clean
      data:
        rooms: 
          - "{{ bathroom_id }}"
        repeats: 2
        fan_speed: max
        mop_intensity: 'off'
    - if: 
        - condition: template
          value_template: |
            {{ 
              is_state('binary_sensor.roborock_s7_mop_attached', 'on') and
              is_state('binary_sensor.roborock_s7_water_box_attached', 'on') 
            }}
      then:
        - service: script.vacuum_clean
          data:
            rooms: 
              - "{{ bathroom_id }}"
            repeats: 2
            fan_speed: 'off'
            mop_intensity: intense
            mop_mode: deep_plus

- id: clean_zone
  alias: "Прибрати зону"
  mode: queued
  trigger:
    - platform: state
      entity_id: sensor.fireplace_button_action
      to: single
      variables:
        zones_to_clean: [fireplace]
    - platform: state
      entity_id: sensor.fireplace_button_action
      to: double
      variables:
        zones_to_clean: [fireplace, terrace_exit]
  action:
    - service: script.vacuum_clean_zone
      data:
        zones: "{{ zones_to_clean }}"
        fan_speed: max

- id: clean_house
  alias: Прибирання будинку
  trigger:
    - platform: time
      at:
        - "09:00:00"
        - "17:00:00"
    - platform: state
      entity_id:
        - group.residents
      to: not_home
    - platform: event
      event_type: external_command
      event_data:
        command: /clean_house
      variables:
        force_clean: true
  condition:
    - alias: Форсоване прибирання або сьогодні не неділя і ще не прибиралось
      condition: template
      value_template: |
        {{ 
          force_clean is defined and force_clean or
          as_datetime(states('input_datetime.last_cleaned_at')).strftime('%Y-%m-%d') != utcnow().strftime("%Y-%m-%d")
          and now().strftime('%a') != 'Sun'
        }}
  action:
    - if:
        - condition: or
          conditions:
            - condition: state
              entity_id: group.residents
              state: not_home
            - condition: template
              value_template: "{{ force_clean is defined and force_clean }}"
              alias: Force clean
          alias: Нас нема вдома або підтверджене прибирання
      then:
        - service: input_datetime.set_datetime
          data:
            date: "{{ now().strftime('%Y-%m-%d') }}"
          target:
            entity_id: input_datetime.last_cleaned_at
        - service: script.vacuum_clean
          alias: Пилососити
          data:
            rooms: "{{ states('sensor.rooms_to_clean_today') | from_json }}"
            mop_intensity: 'off'
            fan_speed: turbo
        - service: script.vacuum_clean
          alias: Пилососити вхідну кімнату
          data: 
            rooms: [main_entrance_room]
            repeats: 2
            fan_speed: max
            mop_intensity: 'off'
        - if: 
            - condition: template
              value_template: >-
                {{ 
                  is_state('binary_sensor.roborock_s7_mop_attached', 'on') and
                  is_state('binary_sensor.roborock_s7_water_box_attached', 'on') 
                }}
          then:
            - alias: Очікуємо поки робот зарядиться
              wait_template: |
                {{ states('vacuum.bruce') == 'docked' and float(states('sensor.roborock_s7_battery'), 0) >= 60 }}
              timeout: "01:30:00"
            - service: script.vacuum_clean
              alias: Мити підлогу
              data:
                rooms: "{{ states('sensor.rooms_to_clean_today') | from_json }}"
                fan_speed: 'off'
                mop_intensity: custom
            - service: script.vacuum_clean
              alias: Мити вхідну кімнату
              data: 
                rooms: [main_entrance_room]
                fan_speed: 'off'
                mop_intensity: intense
                mop_mode: deep_plus
        
      else:
        - event: important_home_event
          event_data:
            message: |
              Час поприбирати зміщено на коли Ви покинете будинок. Буде прибрано:
              - {{ states('sensor.rooms_to_clean_today') | from_json | join('\n -') }}
              Щоб прибрати зараз тисни /clean_house
          alias: Сповіщення про прибирання
  mode: single

# - id: set_roborock_fan_speed_to_quiet_on_returning
#   trigger:
#     platform: state
#     entity_id: vacuum.bruce
#     to: returning
#     for: 00:00:05
#   condition:
#     - condition: template
#       value_template: "{{ states('vacuum.bruce') == 'returning' }}"
#   action:
#     - service: vacuum.set_fan_speed
#       target:
#         entity_id: vacuum.bruce
#       data:
#         fan_speed: quiet