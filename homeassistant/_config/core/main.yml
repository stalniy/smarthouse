group:
  residents:
    name: Residents
    entities:
      - person.serhii

input_datetime: 
  back_home_at:
    name: Час повернення додому
    icon: mdi:home-clock
    has_date: true
    has_time: true
  went_to_bed_at:
    name: Лягли спати
    has_date: true
    has_time: true

input_text:
  serhii_phone_shortcut:
    name: Сергій вдома?

# input_boolean:
#   terace_door_open:
#     name: Двері на терасі

input_select:
  curtain_outside_mode:
    name: Режим ролет
    options:
      - tv_watching_light_mode
      - tv_watching_mode
      - close_panoramic
      - close_everything
      - open

input_boolean:
  disable_auto_light: 
    name: Disable automatic light
    
counter:
  kid_bathroom_switch:
    name: К-сть перемикань світла в дитячій ванній
    step: 1
  master_bathroom_switch:
    name: К-сть перемикань світла в дорослій ванній
    step: 1

sensor:
  - platform: template
    sensors:
      some_time_at_home_passed:
        device_class: timestamp
        value_template: "{{ (states('input_datetime.back_home_at') | as_datetime | as_local) + timedelta(minutes=10) }}"
  # - platform: mqtt_room
  #   device_id: "sd:0xfd44"
  #   name: Car
  #   state_topic: 'espresense/devices/sd:0xfd44'
  #   timeout: 10
  #   away_timeout: 10
  # - platform: mqtt_room
  #   device_id: "iphone_serhii"
  #   name: serhii_iphone_room
  #   state_topic: 'espresense/devices/iphone_serhii'
  #   timeout: 10
  #   away_timeout: 10

template:
  - binary_sensor:  
    - name: is_dark_outside
      state: |
        {% if has_value('sensor.garage_light_sensor_illuminance_lux') %}
          {{ float(states('sensor.garage_light_sensor_illuminance_lux')) < 25 }}
        {% elif has_value('sun.sun') %} 
          {{ 
            is_state('sun.sun', 'below_horizon') or
            now() + timedelta(minutes=15) >= as_datetime(states('sensor.sun_next_setting'))
          }}
        {% else %}
          {{ now().hour >= 22 or now().hour <= 6 }}
        {% endif %}
    - name: is_main_door_unlocked
      device_class: lock
      state: "{{ is_state('binary_sensor.main_entrance_lock_contact', 'off') }}"
    - name: is_terace_door_unlocked
      device_class: lock
      state: "{{ is_state('binary_sensor.terace_door_lock_water_leak', 'on') }}"
    - name: seen_vehicle_near_gates
      state: "{{ is_state('binary_sensor.camera_garage_gates_smart_motion_vehicle', 'on') }}"
      delay_off:
        minutes: 5
  - select:
    - name: curtain_outside_mode
      state: |
        {% from 'house_covers.jinja' import covers_state %}
        {{ covers_state() }}
      options: |
        {{[
          'tv_watching_light_mode',
          'tv_watching_mode',
          'protect_panoramic',
          'protect_all',
          'open_all',
          'custom'
        ]}}
      select_option:
      - condition: template
        value_template: "{{ option != 'custom' }}"
      - service_template: "cover.{{ 'open' if option == 'open_all' else 'close' }}_cover"
        target:
          entity_id: |
            {% from 'house_covers.jinja' import covers_group %}
            {% if option == 'open_all' %}
              {{ covers_group('all', 'closed') | from_json }}
            {% else %}
              {{ covers_group('all' if option == 'protect_all' else option, 'open') | from_json | list }}
            {% endif %}
      - condition: template
        value_template: |
          {% from 'house_covers.jinja' import covers_not_in %}
          {{ 
            option != 'open_all' and 
            option != 'protect_all' and
            covers_not_in(option, 'closed') | from_json | count > 0
          }}
      - service: cover.open_cover
        target:
          entity_id: |
            {% from 'house_covers.jinja' import covers_not_in %}
            {{ covers_not_in(option, 'closed') | from_json | list }}
  - trigger:
    - platform: state
      entity_id: input_datetime.went_to_bed_at
    - platform: time_pattern
      hours: "*"
      minutes: 0
    - platform: event
      event_type: event_template_reloaded
    binary_sensor:
      name: is_sleeping
      state: |
        {% set slept_at = as_datetime(states('input_datetime.went_to_bed_at')) %}
        {% set current_time = now() %}
        {% if slept_at.day == current_time.day and slept_at.hour < 7 %}
          {{ current_time.hour < 7 }}
        {% else %}
          {% set tomorrow_morning = as_local(slept_at + timedelta(days=1)).replace(hour=7, minute=0, second=0) %}
          {{ current_time < tomorrow_morning }}
        {% endif %}
  - trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
    - platform: event
      event_type: event_template_reloaded
    sensor:
    - name: solar_forecast
      unit_of_measurement: "kW"
      state_class: measurement
      state: |
        {{ float(states('sensor.solcast_pv_forecast_forecast_today'), 0) }}

  - trigger:
    # - platform: time_pattern
    #   minutes: "/1"
    - platform: state
      entity_id: binary_sensor.kitchen_motion_occupancy
    binary_sensor:
    - name: kitchen_occupancy
      state: |
        {{ 
          is_state('binary_sensor.kitchen_motion_occupancy', 'on')
        }}
    

command_line:
  - switch:
      name: water_heater_2k
      icon: mdi:water-boiler
      command_on: !secret water_heater_command_on
      command_off: !secret water_heater_command_off
      command_state: !secret water_heater_command_state
      value_template: >-
        {{ value == '"on"' }}
      # availability: "{{ value_json.error == 0 }}"
  - sensor:
      name: host_battery
      state_class: measurement
      command: "cat /sys/class/power_supply/BAT1/capacity"
      unit_of_measurement: "%"
  - sensor:
      name: internet_ping_time
      state_class: measurement
      command_timeout: 10
      command: |
        ping -q -c 1 -w 1 95.158.22.5 | grep -Po 'round-trip min/avg/max = \K\d+(\.\d+)'
      unit_of_measurement: ms
      value_template: "{{ value }}"
      scan_interval: 5

automation: !include ./automations.yml
script: !include ./script.yml