- id: set_back_home_date
  alias: "Встановити час повернення додому"
  trigger:
    - platform: state
      entity_id: group.residents
      from: not_home
      to: home
  action:
    - service: input_datetime.set_datetime
      data:   
        timestamp: "{{ now().timestamp() }}"
      target:
        entity_id: input_datetime.back_home_at
  mode: single

- id: sync_device_state_with_input
  alias: Збереження трекінгу девайса
  trigger:
    - platform: state
      entity_id: person.serhii
  action:
    - service: input_text.set_value
      data: 
        value: "{{ trigger.to_state.state }}"
      target: 
        entity_id: input_text.serhii_phone_shortcut

- id: restore_device_state_on_restart
  alias: Відновити стан девайсу на перезавантаження HASS
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: device_tracker.see
      data:
        dev_id: serhii_phone_shortcut
        location_name: "{{ states('input_text.serhii_phone_shortcut') }}"

# - id: sync_terace_door_open
#   trigger:
#     - platform: state
#       entity_id: sensor.terrace_door_sensor
#   action:
#     - service_template: "input_boolean.turn_{{ 'on' if trigger.to_state.state == 'False' else 'off' }}"
#       target:
#         entity_id: input_boolean.terace_door_open

- id: turn_off_lights_when_not_needed
  trigger:
    - platform: state
      entity_id: group.residents
      from: home
      to: not_home
      for: 00:05:00
    - platform: state
      entity_id: binary_sensor.is_sleeping
      from: 'off'
      to: 'on'
  action:
    - service: switch.turn_off
      target:
        entity_id:
          - switch.master_bathroom
          - switch.kitchen_light_main
          - switch.kitchen_light_bar
          - switch.garage_light_outside
          - switch.main_entrance_outside_light
          - switch.garage_light_inside_l1
          - switch.garage_light_inside_l2
          - switch.garage_yard_light
          - switch.basement_light
    - service: light.turn_off
      target:
        entity_id:
          - light.kid_bathroom
          - light.kitchen_led_light
        

- id: duplicate_persistent_notification_to_telegram
  trigger:
    - platform: persistent_notification
      update_type:
        - added
  action:
    - event: important_home_event
      event_data:
        title: "{{ trigger.notification.title }}"
        message: "{{ trigger.notification.message }}"

- id: toggle_curtains_mode
  alias: Керування режимом ролет
  trigger:
    platform: state
    entity_id: input_select.curtain_outside_mode
  variables:
    cover_state: "{{ 'open' if trigger.to_state.state == 'open' else 'close' }}"
    inversed_cover_state: "{{ 'closed' if trigger.to_state.state == 'open' else 'open' }}"
  action:
    - service_template: "cover.{{ cover_state }}_cover"
      target:
        entity_id: |
          {% set entity_ids = [] %}
          {% if trigger.to_state.state == 'tv_watching_light_mode' %}
            {% set entity_ids = entity_ids + [
              'cover.livingroom_outside_curtain_1',
              'cover.livingroom_outside_curtain_2',
            ] %}
          {% elif trigger.to_state.state == 'tv_watching_mode' %}
            {% set entity_ids = entity_ids + [
                'cover.livingroom_outside_curtain_1',
                'cover.livingroom_outside_curtain_2',
                'cover.terrace_outside_curtain',
            ] %}
          {% elif trigger.to_state.state == 'close_panoramic' %}
            {% set entity_ids = entity_ids + [
                'cover.livingroom_outside_curtain_1',
                'cover.livingroom_outside_curtain_2',
                'cover.terrace_outside_curtain',
                'cover.master_bedroom_outside_curtain',
            ] %}
          {% else %}
            {% set entity_ids = entity_ids + [
                'cover.livingroom_outside_curtain_1',
                'cover.livingroom_outside_curtain_2',
                'cover.terrace_outside_curtain',
                'cover.master_bedroom_outside_curtain',
                'cover.kitchen_outside_curtain',
                'cover.kid_small_outside_curtain',
                'cover.kid_big_outside_curtain',
                'cover.cabinet_outside_curtain',
            ] %}
          {% endif %}
          {{ entity_ids | list  }}

- id: solcast_forecast_sync
  alias: Solcast_update
  description: New API call Solcast
  trigger:
    - platform: time
      at: '22:00:00'
  # condition:
  #   - condition: template
  #     value_template: |
  #       {% set limit = float(states('sensor.solcast_pv_forecast_api_limit'), 0) %}
  #       {{ float(states('sensor.solcast_pv_forecast_api_used'), 0) < limit }}
  
  action:
  - delay: 
      minutes: "{{ range(0, 15)|random|int }}"
      seconds: "{{ range(0, 59)|random|int }}"
  - service: solcast_solar.update_forecasts
    data: {}

- id: count_number_of_switches
  mode: parallel
  trigger:
    - platform: state
      entity_id: switch.kid_bathroom
      from: 'off'
      to: 'on'
      variables:
        counter_entity_id: counter.kid_bathroom_switch
    - platform: state
      entity_id: switch.master_bathroom
      from: 'off'
      to: 'on'
      variables:
        counter_entity_id: counter.master_bathroom_switch
  action:
    - service: counter.increment
      target:
        entity_id: "{{ counter_entity_id }}"
    - if: 
      - condition: template
        value_template: "{{ is_state(counter_entity_id, '1') }}"
      then:
        - delay: "00:00:03"
        - service: counter.reset
          target:
            entity_id: "{{ counter_entity_id }}"

- id: family_wake_up
  trigger:
    - platform: time
      at: "07:00:00"
  action:
    - event: sleeping_time_end

- id: leave_home_on_events_sequence
  mode: single
  trigger:
    platform: event
    event_type: yard_crossed_line
    event_data:
      name: yard_gates
      object_type: Vehicle
      direction: RightToLeft
  condition:
    - condition: template
      value_template: |
        {{ 
          is_state('group.residents', 'home') and
          is_state('binary_sensor.is_terace_door_unlocked', 'off') and 
          is_state('binary_sensor.is_main_door_unlocked', 'off') 
        }}
  action:
    - wait_for_trigger:
        platform: event
        event_type: yard_crossed_region
        event_data:
          name: garage_car_arrived
          object_type: Vehicle
      timeout: "00:10:00"
      continue_on_timeout: false
    - service: device_tracker.see
      data:
        dev_id: serhii_phone_shortcut
        location_name: "not_home"

- id: notify_about_tracked_events
  alias: Notify in messenger about tracked events
  mode: parallel
  max: 1000
  trigger:
    platform: event
    event_type: important_home_event
  action:
    - service: notify.signal_serhii
      data: 
        message: "{{ trigger.event.data.message }}"
        data:
          attachments: "{{ trigger.event.data.attachments if 'attachments' in trigger.event.data else [] }}"

    # - service: notify.telegram_serhii
    #   data: >-
    #     {% set event = trigger.event.data %}
    #     {% if 'attachments' in event %}
    #       {{{
    #         'message': '',
    #         'data': {
    #           'photo': {
    #             'file': event['attachments'][0],
    #             'caption': event['message'] | replace('_', '\_')
    #           }
    #         }
    #       }}}
    #     {% else %}
    #       {{{
    #         'message': event['message'] | replace('_', '\_')
    #       }}}
    #     {% endif %}

- id: translate_messenger_command_to_external_command
  alias: Translate messenger message to external command
  trigger:
    platform: event
    # event_type: telegram_command
    event_type: signal_message_received
  condition:
    - condition: template
      value_template: "{{ trigger.event.data.message[0] == '/' and trigger.event.data.from == 'Serhii' }}"
  action:
    - event: external_command
      event_data:
        command: "{{ trigger.event.data.message }}"

# - id: notify_about_low_battery_devices
#   alias: Notification about low battery devices
#   trigger:
#      - name: has_devices_with_low_battery
#     state: >-
#       {{ states.sensor
#         | selectattr('attributes.device_class', 'eq', 'battery')
#         | rejectattr('entity_id', 'in', [])
#         | map(attribute='state')
#         | map('int', -1) 
#         | select('le', 15)
#         | select('ge', 0)
#         | list 
#         | count
#       }}

# - id: keep_last_turned_off_at_for_water_heater_2k
#   trigger:
#     platform: state
#     entity_id: switch.water_heater_2k
#     to: 'off'
#   action:
#     - service: input_datetime.set_datetime
#       target:
#         entity_id: input_datetime.last_water_heater_2k_turned_off_at
#       data:
#         datetime: "{{ now() }}"

- id: notify_about_internet_loss
  alias: Notify about Intenet loss
  trigger:  
    - platform: state
      entity_id: sensor.internet_ping_time
      to: ['unknown', 'unavailable']
  action:
    - service: persistent_notification.create
      data:
        title: "⚠ - Warning!"
        message: |
          Lost Internet at {{ now() }}

- id: close_curtains_when_sleeping
  alias: Close curtains on sleep
  trigger:
    platform: state
    entity_id: binary_sensor.is_sleeping
    to: 'on'
  condition:
    - condition: template
      value_template: "{{ float(states('sensor.garage_light_sensor_illuminance_lux')) > 500 }}"
  action:
    - service: cover.close_cover
      target:
        entity_id:
          - cover.kid_big_outside_curtain
          - cover.master_bedroom_outside_curtain

- id: back_to_home_from_carplay
  alias: Back to home from car
  trigger:
    platform: event
    event_type: ios.action_fired
    event_data:
      actionID: back_home_from_car
      sourceDevicePermanentID: !secret ios_actions_device_id
  condition:
    - condition: template
      # check that my phone is in local network
      value_template: |
        {{ 
          is_state('binary_sensor.seen_vehicle_near_gates', 'on') 
        }}
  action:
    - service: device_tracker.see
      data:
        dev_id: serhii_phone_shortcut
        location_name: home
    - service: switch.turn_on
      target:
        entity_id: switch.garage_gates_left_open

- id: auto_protection_on_leaving
  alias: Automatically protect house on leaving
  trigger:
    platform: state
    entity_id: group.residents
    to: not_home
  action:
    - if: 
      - condition: template
        value_template: "{{ is_state('binary_sensor.is_terace_door_unlocked', 'on') }}"
      then:
      - service: cover.close_cover
        target:
          entity_id: cover.terrace_outside_curtain
    - if:
      - condition: template
        value_template: "{{ is_state('binary_sensor.master_bedroom_window_open_contact', 'on') }}"
      then:
      - service: cover.close_cover
        target:
          entity_id: cover.master_bedroom_outside_curtain
    
- id: auto_unprotect_on_come_home
  alias: Automatically unprotect when come home
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.is_main_door_unlocked
        - binary_sensor.is_terace_door_unlocked
      from: "off"
      to: "on"
  condition:
    - condition: template
      value_template: | 
        {% set is_just_arrived = now().timestamp() - as_datetime(states('input_datetime.back_home_at')).timestamp() <= 15 * 60 %}
        {{ is_just_arrived and is_state('binary_sensor.livingroom_tv_consumes_power', 'off') and
          not is_state('input_select.curtain_outside_mode', 'open')
        }}
  action: 
    - service: input_select.select_option
      data:
        option: open
      target:
        entity_id: input_select.curtain_outside_mode
