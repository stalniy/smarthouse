- id: set_back_home_date
  alias: "Встановити час повернення додому"
  trigger:
    - platform: state
      entity_id: group.residents
      from: not_home
      to: home
  action:
    - service: input_datetime.set_datetime
      data:   
        timestamp: "{{ now().timestamp() }}"
      target:
        entity_id: input_datetime.back_home_at
  mode: single

- id: sync_device_state_with_input
  alias: Збереження трекінгу девайса
  trigger:
    - platform: state
      entity_id: person.serhii
  action:
    - service: input_text.set_value
      data: 
        value: "{{ trigger.to_state.state }}"
      target: 
        entity_id: input_text.serhii_phone_shortcut

- id: restore_device_state_on_restart
  alias: Відновити стан девайсу на перезавантаження HASS
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: device_tracker.see
      data:
        dev_id: serhii_phone_shortcut
        location_name: "{{ states('input_text.serhii_phone_shortcut') }}"

- id: sync_terace_door_open
  trigger:
    - platform: state
      entity_id: sensor.terrace_door_sensor
  action:
    - service_template: "input_boolean.turn_{{ 'on' if trigger.to_state.state == 'False' else 'off' }}"
      target:
        entity_id: input_boolean.terace_door_open

- id: disable_light_on_leave
  trigger:
    - platform: state
      entity_id: group.residents
      from: home
      to: not_home
      for: 00:05:00
  action:
    - service: switch.turn_off
      entity_id:
        - switch.garage_light_outside_2
        - switch.kid_bathroom
        - switch.master_bathroom
        - switch.kitchen_light_main
        - switch.kitchen_bar

- id: duplicate_persistent_notification_to_telegram
  trigger:
    - platform: persistent_notification
      update_type:
        - added
  action:
    - event: important_home_event
      event_data:
        title: "{{ trigger.notification.title }}"
        message: "{{ trigger.notification.message }}"

- id: toggle_curtains_mode
  alias: Керування режимом ролет
  trigger:
    platform: state
    entity_id: input_select.curtain_outside_mode
  variables:
    cover_state: "{{ 'open' if trigger.to_state.state == 'open' else 'close' }}"
    inversed_cover_state: "{{ 'closed' if trigger.to_state.state == 'open' else 'open' }}"
  action:
    - service_template: "cover.{{ cover_state }}_cover"
      target:
        entity_id: |
          {% set entity_ids = [] %}
          {% if trigger.to_state.state == 'tv_watching_light_mode' %}
            {% set entity_ids = entity_ids + [
              'cover.livingroom_outside_curtain_1',
              'cover.livingroom_outside_curtain_2',
            ] %}
          {% elif trigger.to_state.state == 'tv_watching_mode' %}
            {% set entity_ids = entity_ids + [
                'cover.livingroom_outside_curtain_1',
                'cover.livingroom_outside_curtain_2',
                'cover.terrace_outside_curtain',
            ] %}
          {% elif trigger.to_state.state == 'close_panoramic' %}
            {% set entity_ids = entity_ids + [
                'cover.livingroom_outside_curtain_1',
                'cover.livingroom_outside_curtain_2',
                'cover.terrace_outside_curtain',
                'cover.master_bedroom_outside_curtain',
            ] %}
          {% else %}
            {% set entity_ids = entity_ids + [
                'cover.livingroom_outside_curtain_1',
                'cover.livingroom_outside_curtain_2',
                'cover.terrace_outside_curtain',
                'cover.master_bedroom_outside_curtain',
                'cover.kitchen_outside_curtain',
                'cover.kid_small_outside_curtain',
                'cover.kid_big_outside_curtain',
                'cover.cabinet_outside_curtain',
            ] %}
          {% endif %}
          {{ entity_ids | list  }}
          
- id: is_it_me_back_home
  alias: Перевірка чи це я повернувся додому?
  trigger:
    - platform: event
      event_type: dahua_event_received
      event_data:
        action: Start
        Code: CrossRegionDetection
        data: 
          Direction: Enter
          Object:
            ObjectType: Vehicle
          Name: garage_car_arrived
    - platform: event
      event_type: dahua_event_received
      event_data:
        action: Start
        Code: CrossLineDetection
        data: 
          Direction: RightToLeft
          Object:
            ObjectType: Human
          Name: yard_gates
  condition:
    - condition: template
      value_template: "{{ is_state('group.residents', 'not_home') }}"
  action:
    - event: important_home_event
      event_data:
        message: "Повернувся додому?"

- id: solcast_forecast_sync
  alias: Solcast_update
  description: New API call Solcast
  trigger:
    - platform: sun
      event: sunrise
    - platform: sun
      event: sunset
    - platform: time
      at: 
        - '10:00'
        - '11:00'
        - '12:00'
        - '14:00'
        - '15:00'
        - '16:00'
        - '17:00'
        - '18:00'
  condition:
  - condition: sun
    before: sunset
    after: sunrise
  action:
  - service: solcast_solar.update_forecasts
    data: {}
  mode: single

- id: count_number_of_switches
  mode: parallel
  trigger:
    - platform: state
      entity_id: switch.kid_bathroom
      from: 'off'
      to: 'on'
      variables:
        counter_entity_id: counter.kid_bathroom_switch
    - platform: state
      entity_id: switch.master_bathroom
      from: 'off'
      to: 'on'
      variables:
        counter_entity_id: counter.master_bathroom_switch
  action:
    - service: counter.increment
      target:
        entity_id: "{{ counter_entity_id }}"
    - if: 
      - condition: template
        value_template: "{{ is_state(counter_entity_id, '1') }}"
      then:
        - delay: "00:00:03"
        - service: counter.reset
          target:
            entity_id: "{{ counter_entity_id }}"

- alias: Template reloaded
  mode: single
  trigger:
    - platform: event
      event_type: event_template_reloaded
  action:
    - event: my_event_template_reloaded
      event_data: {}

- id: family_wake_up
  trigger:
    - platform: time
      at: ["07:00:00", "16:30:00"]
  action:
    - event: sleeping_time_end

- id: leave_home_on_events_sequence
  mode: single
  trigger:
    platform: state
    entity_id: binary_sensor.is_main_door_unlocked
    from: 'on'
    to: 'off'
  condition:
    - condition: template
      value_template: "{{ is_state('group.residents', 'home') }}"
  action:
    - wait_for_trigger:
        platform: event
        event_type: yard_crossed_line
        event_data: 
          name: house_near_stairs
          direction: LeftToRight
      timeout: "00:05"
      continue_on_timeout: false
    - wait_template: "{{ is_state('binary_sensor.camera_house_entrance_smart_motion_human', 'on') }}"
      timeout: "00:00:30"
      continue_on_timeout: false
    - wait_for_trigger:
        platform: event
        event_type: yard_crossed_line
        event_data:
          name: garage_home_direction
          direction: LeftToRight
          object_type: Human
      timeout: "00:05:00"
      continue_on_timeout: false
    - wait_for_trigger:
        platform: event
        event_type: yard_crossed_line
        event_data:
          name: yard_gates
          direction: LeftToRight
          object_type: Human
      timeout: "00:05:00"
      continue_on_timeout: false
    - wait_for_trigger:
        platform: event
        event_type: yard_crossed_line
        event_data:
          name: yard_gates
          direction: LeftToRight
          object_type: Vehicle
      timeout: "00:10:00"
      continue_on_timeout: false
    - service: device_tracker.see
      data:
        dev_id: serhii_phone_shortcut
        location_name: "not_home"

- id: notify_about_tracked_events
  alias: Notify in messenger about tracked events
  mode: parallel
  max: 1000
  trigger:
    platform: event
    event_type: important_home_event
  action:
    - service: notify.signal_serhii
      data: 
        message: "{{ trigger.event.data.message }}"
        data:
          attachments: "{{ trigger.event.data.attachments if 'attachments' in trigger.event.data else [] }}"

    # - service: notify.telegram_serhii
    #   data: >-
    #     {% set event = trigger.event.data %}
    #     {% if 'attachments' in event %}
    #       {{{
    #         'message': '',
    #         'data': {
    #           'photo': {
    #             'file': event['attachments'][0],
    #             'caption': event['message'] | replace('_', '\_')
    #           }
    #         }
    #       }}}
    #     {% else %}
    #       {{{
    #         'message': event['message'] | replace('_', '\_')
    #       }}}
    #     {% endif %}

- id: translate_messenger_command_to_external_command
  alias: Translate messenger message to external command
  trigger:
    platform: event
    # event_type: telegram_command
    event_type: signal_message_received
  condition:
    - condition: template
      value_template: "{{ trigger.event.data.message[0] == '/' and trigger.event.data.from == 'Serhii' }}"
  action:
    - event: external_command
      event_data:
        command: "{{ trigger.event.data.message }}"
