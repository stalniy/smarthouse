utility_meter:
  monthly_energy:
    source: sensor.power_consumption_energy
    name: Monthly Energy
    cycle: monthly
    offset:
      days: 0
      hours: 12
      minutes: 0
    tariffs:
      - day
      - night

input_number:
  energy_consumption_day_cost: 
    name: Cost per Kw/h during day
    unit_of_measurement: UAH
    mode: box
    min: 0
    max: 100
  energy_consumption_night_cost: 
    name: Cost per Kw/h during night
    unit_of_measurement: UAH
    mode: box
    min: 0
    max: 100

input_boolean:
  washing_machine_power_reservation:
    name: Washing machine power reservation

template:
  - sensor:
    - name: monthly_energy_day_cost
      state: |
        {{ 
          (states('sensor.monthly_energy_day') | float * states('input_number.energy_consumption_day_cost') | float) | round(2)
        }}
      unit_of_measurement: UAH
    - name: monthly_energy_night_cost
      state: |
        {{ 
          (states('sensor.monthly_energy_night') | float * states('input_number.energy_consumption_night_cost') | float) | round(2)
        }}
      unit_of_measurement: UAH
    - name: monthly_energy_total
      state: |
        {{
          states('sensor.monthly_energy_day') | float + 
          states('sensor.monthly_energy_night') | float
        }}
      unit_of_measurement: kW/h
    - name: monthly_energy_total_cost
      state: |
        {{ states('sensor.monthly_energy_day_cost') | float + states('sensor.monthly_energy_night_cost') | float }}
      unit_of_measurement: UAH
    - name: energy_cost
      unit_of_measurement: UAH/kWh
      state_class: measurement
      state: >-
        {% if states('sensor.energy_tariff') == 'day' %}
          {{ states('input_number.energy_consumption_day_cost') | float }}
        {% else %}
          {{ states('input_number.energy_consumption_day_cost') | float }}
        {% endif %}
  - trigger:
      - platform: time
        at: 
          - '07:00:00'
          - 07:05:00
          - 08:00:00
      - platform: time
        at: '23:00:00'
      - platform: homeassistant
        event: start
      - platform: event
        event_type: event_template_reloaded
    sensor:
      - name: energy_tariff
        state: "{{ 'day' if 7 <= (now() | as_local).hour < 23 else 'night' }}"
  - trigger:
    - platform: time_pattern
      hours: "*"
      minutes: 0
    - platform: time_pattern
      hours: "*"
      minutes: 55
    - platform: event
      event_type: event_template_reloaded
    - platform: homeassistant
      event: start
    binary_sensor:
    - name: is_cheap_grid_energy_period
      state: "{{ 23 <= now().hour or now().hour < 7 }}"
      attributes:
        start_time: "23:00:00"
        end_time: "06:55:00"
    
  - trigger:
    - platform: time_pattern
      minutes: "/5"
    - platform: state
      entity_id:
        - sensor.power_consumption_voltage_x
        - sensor.power_consumption_voltage_y
        - sensor.power_consumption_voltage_z
    binary_sensor:
    - name: has_connection_to_main
      state: | 
        {% set voltage_states = [
          states.sensor.power_consumption_voltage_x,
          states.sensor.power_consumption_voltage_y,
          states.sensor.power_consumption_voltage_z
        ]
        %}
        {% set is_changed_recently = voltage_states 
          | map(attribute='last_changed') 
          | select('>=', now() - timedelta(seconds=10))
          | list
          | count > 0
        %}
        {% set is_voltage_usable = voltage_states
          | map(attribute='state')
          | map('float', 0)
          | select('<=', 243) 
          | select('>=', 198) 
          | list 
          | count > 0
        %}
        
        {{ is_changed_recently and is_voltage_usable }}

  - binary_sensor:
      - name: inverter_connected_to_grid
        state: |
          {{ 
            states.sensor.power_consumption_voltage_y.last_changed >= now() - timedelta(seconds=10) and
            float(states('sensor.lux_grid_voltage_live'), 0) > 0
          }}

  - trigger:
    - platform: state
      entity_id: sensor.washing_machine_power
    sensor:
    - name: washing_machine_state
      state: >-
        {% set power = float(states('sensor.washing_machine_power')) %}
        {% if power == 0 %}
          0
        {% elif power >= 500 %}
          heating_water
        {% else %}
          1
        {% endif %}
      attributes:
        changed: "{{ now() }}"




automation: !include ./automations.yml